from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import get_all_users, get_bot_stats, update_balance, add_transaction, get_user
from config import ADMIN_IDS

router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    stats = get_bot_stats()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance"),
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ]
    ])
    
    admin_text = (
        f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.2f} ‚ÇΩ\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['total_games']}\n"
        f"üí∏ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_wagered']:.2f} ‚ÇΩ"
    )
    
    await message.answer(admin_text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    stats = get_bot_stats()
    users = get_all_users()
    
    # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
    top_balance = sorted(users, key=lambda x: x['main_balance'] + x['bonus_balance'], reverse=True)[:5]
    
    # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç–∞–≤–∫–∞–º
    top_wagered = sorted(users, key=lambda x: x['total_wagered'], reverse=True)[:5]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    stats_text = (
        f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.2f} ‚ÇΩ\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['total_games']}\n"
        f"üí∏ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_wagered']:.2f} ‚ÇΩ\n\n"
        f"üèÜ <b>–¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n"
    )
    
    for i, user in enumerate(top_balance, 1):
        total_balance = user['main_balance'] + user['bonus_balance']
        stats_text += f"{i}. {user['full_name']}: {total_balance:.2f} ‚ÇΩ\n"
    
    stats_text += f"\nüíé <b>–¢–æ–ø –ø–æ —Å—Ç–∞–≤–∫–∞–º:</b>\n"
    
    for i, user in enumerate(top_wagered, 1):
        stats_text += f"{i}. {user['full_name']}: {user['total_wagered']:.2f} ‚ÇΩ\n"
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    users = get_all_users()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    users_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
    
    for user in users[:10]:
        total_balance = user['main_balance'] + user['bonus_balance']
        users_text += (
            f"üë§ {user['full_name']}\n"
            f"üÜî {user['user_id']}\n"
            f"üí∞ {total_balance:.2f} ‚ÇΩ\n"
            f"üéÆ {user['games_played']} –∏–≥—Ä\n\n"
        )
    
    await callback.message.edit_text(users_text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_balance")
async def admin_balance_menu(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/setbalance USER_ID AMOUNT</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>/setbalance 123456789 1000</code>\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –±–∞–ª–∞–Ω—Å—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "<code>/addbalance USER_ID AMOUNT</code>",
        reply_markup=keyboard
    )

@router.message(Command("setbalance"))
async def set_balance_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbalance USER_ID AMOUNT")
            return
        
        user_id = int(parts[1])
        amount = float(parts[2])
        
        user = get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        current_balance = user['main_balance']
        difference = amount - current_balance
        
        update_balance(user_id, difference, 'main')
        add_transaction(user_id, difference, 'admin_adjustment', f'–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ"
        )
        
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbalance USER_ID AMOUNT")

@router.message(Command("addbalance"))
async def add_balance_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addbalance USER_ID AMOUNT")
            return
        
        user_id = int(parts[1])
        amount = float(parts[2])
        
        user = get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        update_balance(user_id, amount, 'main')
        add_transaction(user_id, amount, 'admin_bonus', f'–ë–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        
        new_balance = user['main_balance'] + amount
        
        await message.answer(
            f"‚úÖ –ö –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount:.2f} ‚ÇΩ\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ"
        )
        
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addbalance USER_ID AMOUNT")

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    stats = get_bot_stats()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance"),
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ]
    ])
    
    admin_text = (
        f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.2f} ‚ÇΩ\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['total_games']}\n"
        f"üí∏ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_wagered']:.2f} ‚ÇΩ"
    )
    
    await callback.message.edit_text(admin_text, reply_markup=keyboard)